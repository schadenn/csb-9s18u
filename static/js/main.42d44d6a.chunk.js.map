{"version":3,"sources":["styles.js","App.js","index.js"],"names":["baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","activeStyle","acceptStyle","rejectStyle","App","useState","merchantList","setMerchantList","onDrop","useCallback","acceptedFiles","reader","FileReader","onabort","console","log","onerror","onload","parse","result","columns","err","data","reduce","acc","curr","brandId","Object","keys","find","key","toUpperCase","includes","length","JSON","stringify","forEach","file","readAsBinaryString","useDropzone","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","useMemo","whiteSpace","rootElement","document","getElementById","ReactDOM","render"],"mappings":"oOAAMA,EAAY,CAChBC,KAAM,EACNC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,QAAS,OACTC,YAAa,EACbC,aAAc,EACdC,YAAa,UACbC,YAAa,SACbC,gBAAiB,UACjBC,MAAO,UACPC,QAAS,OACTC,WAAY,2BAGRC,EAAc,CAClBN,YAAa,WAGTO,EAAc,CAClBP,YAAa,WAGTQ,EAAc,CAClBR,YAAa,W,wBCnBA,SAASS,IACtB,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAASC,uBAAY,SAACC,GAC1B,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMC,QAAQC,IAAI,6BACnCJ,EAAOK,QAAU,kBAAMF,QAAQC,IAAI,wBACnCJ,EAAOM,OAAS,WAEdC,IAAMP,EAAOQ,OAAQ,CAAEC,SAAS,IAAQ,SAACC,EAAKC,GAC5C,IAAMH,EAASG,EAAKC,QAAO,SAACC,EAAKC,GAC/B,IAAMC,EACJD,EACEE,OAAOC,KAAKH,GAAMI,MAAK,SAACC,GAAD,OACrBA,EAAIC,cAAcC,SAAS,aAGjC,OAAO,2BACFR,GACoB,KAAnBE,EAAQO,OAAR,eACGP,EAAUD,EAAI,eACjB,MAEL,IACHlB,EAAgB2B,KAAKC,UAAUhB,EAAQ,KAAM,QAKjDT,EAAc0B,SAAQ,SAACC,GAAD,OAAU1B,EAAO2B,mBAAmBD,QACzD,IACH,EAMIE,YAAY,CAAE/B,WALhBgC,EADF,EACEA,aACAC,EAFF,EAEEA,cACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,aACAC,EALF,EAKEA,aAGIC,EAAQC,mBACZ,8BAAC,uCACI3D,GACCuD,EAAezC,EAAc,IAC7B0C,EAAezC,EAAc,IAC7B0C,EAAezC,EAAc,MAEnC,CAACuC,EAAcE,EAAcD,IAG/B,OACE,gCACE,gDAASH,EAAa,CAAEK,WAAxB,cACE,qCAAWJ,MACVC,EACC,4DAEA,4GAMJ,sBAAMG,MAAO,CAAEE,WAAY,YAA3B,SAA0CzC,OC/DhD,IAAM0C,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAChD,EAAD,MAEF4C,K","file":"static/js/main.42d44d6a.chunk.js","sourcesContent":["const baseStyle = {\n  flex: 1,\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  padding: \"20px\",\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: \"#eeeeee\",\n  borderStyle: \"dashed\",\n  backgroundColor: \"#fafafa\",\n  color: \"#bdbdbd\",\n  outline: \"none\",\n  transition: \"border .24s ease-in-out\"\n};\n\nconst activeStyle = {\n  borderColor: \"#2196f3\"\n};\n\nconst acceptStyle = {\n  borderColor: \"#00e676\"\n};\n\nconst rejectStyle = {\n  borderColor: \"#ff1744\"\n};\n\nexport { baseStyle, activeStyle, acceptStyle, rejectStyle };\n","import \"./styles.css\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { baseStyle, activeStyle, acceptStyle, rejectStyle } from \"./styles\";\nimport parse from \"csv-parse\";\n\nexport default function App() {\n  const [merchantList, setMerchantList] = useState(\"\");\n  const onDrop = useCallback((acceptedFiles) => {\n    const reader = new FileReader();\n\n    reader.onabort = () => console.log(\"file reading was aborted\");\n    reader.onerror = () => console.log(\"file reading failed\");\n    reader.onload = () => {\n      // Parse CSV file\n      parse(reader.result, { columns: true }, (err, data) => {\n        const result = data.reduce((acc, curr) => {\n          const brandId =\n            curr[\n              Object.keys(curr).find((key) =>\n                key.toUpperCase().includes(\"BRAND\")\n              )\n            ];\n          return {\n            ...acc,\n            ...(brandId.length === 36\n              ? { [brandId]: curr[\"merchant_name\"] }\n              : {})\n          };\n        }, {});\n        setMerchantList(JSON.stringify(result, null, 4));\n      });\n    };\n\n    // read file contents\n    acceptedFiles.forEach((file) => reader.readAsBinaryString(file));\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({ onDrop });\n\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {})\n    }),\n    [isDragActive, isDragReject, isDragAccept]\n  );\n\n  return (\n    <div>\n      <div {...getRootProps({ style })}>\n        <input {...getInputProps()} />\n        {isDragActive ? (\n          <p>Drop the .csv file here ...</p>\n        ) : (\n          <p>\n            Drag 'n' drop the .csv merchant list file here, or click to select\n            file\n          </p>\n        )}\n      </div>\n      <code style={{ whiteSpace: \"pre-line\" }}>{merchantList}</code>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}